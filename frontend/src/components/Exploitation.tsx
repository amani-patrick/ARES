
import React, { useState } from "react";
import { cn } from "@/lib/utils";
import { Zap, Shield, Code, Network, Cpu, Target, Play, Loader2 } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue, 
} from "@/components/ui/select";

interface ExploitationProps {
  className?: string;
}

const Exploitation: React.FC<ExploitationProps> = ({ className }) => {
  const [targetIP, setTargetIP] = useState<string>("");
  const [vulnerabilityType, setVulnerabilityType] = useState<string>("sqli");
  const [payload, setPayload] = useState<string>("");
  const [attackStatus, setAttackStatus] = useState<"idle" | "running" | "success" | "failed">("idle");
  const [attackResults, setAttackResults] = useState<string[]>([]);
  
  const handleLaunchAttack = () => {
    if (!targetIP.trim() || !payload.trim()) return;
    
    setAttackStatus("running");
    setAttackResults([]);
    
    // Simulate attack process
    setTimeout(() => {
      const results = [
        `Target: ${targetIP}`,
        `Vulnerability: ${vulnerabilityType.toUpperCase()}`,
        `Payload: ${payload}`,
        `Timestamp: ${new Date().toISOString()}`,
        "Status: Connection established",
        "Status: Payload delivered",
        "Status: Executing payload...",
        "Status: Command shell obtained!"
      ];
      
      setAttackResults(results);
      setAttackStatus("success");
    }, 3000);
  };

  return (
    <div className={cn("glass h-full flex flex-col", className)}>
      <div className="flex items-center justify-between p-3 border-b border-white/10">
        <h3 className="text-sm font-semibold text-white/90 flex items-center">
          <Zap className="h-4 w-4 mr-2" />
          Exploitation Module
        </h3>
      </div>
      
      <div className="p-4 border-b border-white/10">
        <h4 className="text-sm font-medium mb-3 flex items-center">
          <Target className="h-4 w-4 mr-2 text-red-400" />
          Attack Configuration
        </h4>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div className="space-y-2">
            <label className="text-xs text-white/70">Target IP</label>
            <Input
              value={targetIP}
              onChange={(e) => setTargetIP(e.target.value)}
              placeholder="192.168.1.5"
              className="bg-background/50"
            />
          </div>
          
          <div className="space-y-2">
            <label className="text-xs text-white/70">Vulnerability Type</label>
            <Select value={vulnerabilityType} onValueChange={setVulnerabilityType}>
              <SelectTrigger>
                <SelectValue placeholder="Select vulnerability" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="sqli">SQL Injection</SelectItem>
                <SelectItem value="rce">Remote Code Execution</SelectItem>
                <SelectItem value="xss">Cross-Site Scripting</SelectItem>
                <SelectItem value="csrf">Cross-Site Request Forgery</SelectItem>
                <SelectItem value="lfi">Local File Inclusion</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        
        <div className="space-y-2 mb-4">
          <label className="text-xs text-white/70">Payload</label>
          <Input
            value={payload}
            onChange={(e) => setPayload(e.target.value)}
            placeholder="' OR 1=1 --"
            className="bg-background/50"
          />
        </div>
        
        <Button 
          onClick={handleLaunchAttack} 
          disabled={attackStatus === "running" || !targetIP.trim() || !payload.trim()}
          className="w-full flex items-center justify-center"
          variant={attackStatus === "success" ? "default" : "destructive"}
        >
          {attackStatus === "running" ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Launching Attack...
            </>
          ) : (
            <>
              <Play className="h-4 w-4 mr-2" />
              Launch Attack
            </>
          )}
        </Button>
        
        {attackResults.length > 0 && (
          <div className="mt-4 terminal">
            {attackResults.map((result, idx) => (
              <div key={idx} className={result.includes("shell") ? "text-green-400" : "text-white"}>
                {result}
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div className="flex-1 p-4 overflow-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="glass p-4 rounded-md">
            <h4 className="text-sm font-medium mb-2 flex items-center">
              <Code className="h-4 w-4 mr-2 text-red-400" />
              Payload Generator
            </h4>
            <p className="text-xs text-white/70 mb-3">
              Create custom payloads targeting discovered vulnerabilities
            </p>
            <div className="terminal h-40">
              <span className="text-green-400">payload_gen</span>
              <span className="text-white"> --target=10.0.0.5 --vuln=SQLi --output=exploit.bin</span>
            </div>
          </div>
          
          <div className="glass p-4 rounded-md">
            <h4 className="text-sm font-medium mb-2 flex items-center">
              <Cpu className="h-4 w-4 mr-2 text-yellow-400" />
              Vulnerability Scanner
            </h4>
            <p className="text-xs text-white/70 mb-3">
              Scan targets for known vulnerabilities and misconfigurations
            </p>
            <div className="terminal h-40">
              <span className="text-green-400">vuln_scan</span>
              <span className="text-white"> --target=10.0.0.0/24 --depth=3</span>
              <div className="mt-2">
                <span className="text-yellow-400">[+] Vulnerability found: CVE-2023-XXXX</span>
              </div>
            </div>
          </div>
          
          <div className="glass p-4 rounded-md">
            <h4 className="text-sm font-medium mb-2 flex items-center">
              <Network className="h-4 w-4 mr-2 text-blue-400" />
              Network Exploitation
            </h4>
            <p className="text-xs text-white/70 mb-3">
              Exploit network services and gain initial access
            </p>
            <div className="terminal h-40">
              <span className="text-green-400">exploit</span>
              <span className="text-white"> --module=CVE-2023-XXXX --target=10.0.0.5</span>
              <div className="mt-2">
                <span className="text-green-400">[+] Exploitation successful</span>
              </div>
            </div>
          </div>
          
          <div className="glass p-4 rounded-md">
            <h4 className="text-sm font-medium mb-2 flex items-center">
              <Shield className="h-4 w-4 mr-2 text-red-400" />
              Attack Status
            </h4>
            <p className="text-xs text-white/70 mb-3">
              Track ongoing exploitation attempts and success rates
            </p>
            <div className="glass p-2 rounded-md">
              <div className="flex justify-between text-xs mb-1">
                <span>SQL Injection</span>
                <span className="text-green-400">Successful</span>
              </div>
              <div className="flex justify-between text-xs mb-1">
                <span>RCE Attempt</span>
                <span className="text-yellow-400">In Progress</span>
              </div>
              <div className="flex justify-between text-xs mb-1">
                <span>Privilege Escalation</span>
                <span className="text-red-400">Failed</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exploitation;
